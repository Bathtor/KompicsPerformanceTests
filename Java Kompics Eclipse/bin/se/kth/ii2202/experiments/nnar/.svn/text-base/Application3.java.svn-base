/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package se.kth.ict.id2203.nnar;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Set;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import se.kth.ict.id2203.application.ApplicationContinue;
import se.kth.ict.id2203.application.Pp2pMessage;
import se.kth.ict.id2203.pp2p.PerfectPointToPointLink;
import se.kth.ict.id2203.pp2p.Pp2pSend;
import se.sics.kompics.*;
import se.sics.kompics.address.Address;
import se.sics.kompics.timer.ScheduleTimeout;
import se.sics.kompics.timer.Timer;

/**
 *
 * @author Lars Kroll <lkr@lars-kroll.com>
 */
public class Application3 extends ComponentDefinition {

    Positive<PerfectPointToPointLink> pp2p = requires(PerfectPointToPointLink.class);
    Positive<Timer> timer = requires(Timer.class);
    //NEW
    Positive<NNAtomicRegister> nnar = requires(NNAtomicRegister.class);
    //Private
    private static final Logger logger = LoggerFactory.getLogger(Application3.class);
    //Instance
    private String[] commands;
    private int lastCommand;
    private Set<Address> neighborSet;
    private Address self;
    private volatile boolean readFlag = false;
    private volatile boolean writeFlag = false;

    /**
     * Instantiates a new application0.
     */
    public Application3() {
        subscribe(handleInit, control);
        subscribe(handleStart, control);
        subscribe(handleContinue, timer);
        subscribe(handlePp2pMessage, pp2p);
        subscribe(handleRead, nnar);
        subscribe(handleWrite, nnar);
    }

    Handler<Application3Init> handleInit = new Handler<Application3Init>() {

        @Override
        public void handle(Application3Init event) {
            commands = event.getCommandScript().split(":");
            lastCommand = -1;
            neighborSet = event.getNeighborSet();
            self = event.getSelf();
        }

    };
    Handler<Start> handleStart = new Handler<Start>() {

        @Override
        public void handle(Start event) {
            doNextCommand();
        }

    };
    Handler<ApplicationContinue> handleContinue = new Handler<ApplicationContinue>() {

        @Override
        public void handle(ApplicationContinue event) {
            doNextCommand();
        }

    };
    Handler<Pp2pMessage> handlePp2pMessage = new Handler<Pp2pMessage>() {

        @Override
        public void handle(Pp2pMessage event) {
            logger.info("Received perfect message {}", event.getMessage());
        }

    };
    Handler<ReadResponse> handleRead = new Handler<ReadResponse>() {

        @Override
        public void handle(ReadResponse e) {
            readFlag = false;
            logger.info("Read "+e.getValue().toString());
            doNextCommand();
        }

    };
    
    Handler<WriteResponse> handleWrite = new Handler<WriteResponse>() {

        @Override
        public void handle(WriteResponse e) {
            writeFlag = false;
            logger.info("Completed writing.");
            doNextCommand();
        }

    };

    private void doNextCommand() {
        lastCommand++;

        if (lastCommand > commands.length) {
            return;
        }
        if (lastCommand == commands.length) {
            logger.info("DONE ALL OPERATIONS");
            Thread applicationThread = new Thread("ApplicationThread") {

                @Override
                public void run() {
                    BufferedReader in = new BufferedReader(
                            new InputStreamReader(System.in));
                    while (true) {
                        try {
                            String line = in.readLine();
                            doCommand(line);
                        }
                        catch (Throwable e) {
                            e.printStackTrace();
                        }
                    }
                }

            };
            applicationThread.start();
            return;
        }
        String op = commands[lastCommand];
        doCommand(op);
    }

    private void doCommand(String cmd) {
        if (cmd.startsWith("P")) {
            doPerfect(cmd.substring(1));
            doNextCommand();
        }
        else if (cmd.startsWith("W")) {
            doWrite(cmd.substring(1));
            //doNextCommand();
        }
        else if (cmd.startsWith("R")) {
            doRead();
            //doNextCommand();
        }
        else if (cmd.startsWith("S")) {
            doSleep(Integer.parseInt(cmd.substring(1)));
        }
        else if (cmd.startsWith("X")) {
            doShutdown();
        }
        else if (cmd.equals("help")) {
            doHelp();
            doNextCommand();
        }
        else {
            logger.info("Bad command: '{}'. Try 'help'", cmd);
            doNextCommand();
        }

    }

    private void doHelp() {
        logger.info("Available commands: Ofl, Op, PB<m>, L<m>, S<n>, help, X");
        logger.info("PBm: broadcasts a messages to all nodes in topology using Probabilistic Broadcast");
        logger.info("Op and Ofl are mutually exclusive and will override each other.");
        logger.info("Lm: sends lossy message 'm' to all neighbors");
        logger.info("Sn: sleeps 'n' milliseconds before the next command");
        logger.info("help: shows this help message");
        logger.info("X: terminates this process");
    }

    
    
    private void doPerfect(String message) {
        for (Address neighbor : neighborSet) {
            logger.info("Sending perfect message {} to {}", message, neighbor);
            trigger(new Pp2pSend(neighbor, new Pp2pMessage(self, message)),
                    pp2p);
        }
    }

    private void doSleep(long delay) {
        logger.info("Sleeping {} milliseconds...", delay);

        ScheduleTimeout st = new ScheduleTimeout(delay);
        st.setTimeoutEvent(new ApplicationContinue(st));
        trigger(st, timer);
    }

    private void doShutdown() {
        System.out.println("2DIE");
        System.out.close();
        System.err.close();
        Kompics.shutdown();
    }

    private void doWrite(String s) {
        if (!(writeFlag || readFlag)) {
            logger.info("Starting to write '"+s+"' to register");
            trigger(new WriteRequest(s), nnar);
        } else {
            logger.info("Can't write while another operation is in progress...");
        }
    }

    private void doRead() {
        if (!(writeFlag || readFlag)) {
            logger.info("Starting to read from register");
            trigger(new ReadRequest(), nnar);
        } else {
            logger.info("Can't read while another operation is in progress...");
        }
    }

}
